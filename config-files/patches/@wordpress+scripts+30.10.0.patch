diff --git a/node_modules/@wordpress/scripts/.DS_Store b/node_modules/@wordpress/scripts/.DS_Store
new file mode 100644
index 0000000..e69de29
diff --git a/node_modules/@wordpress/scripts/config/.eslintignore b/node_modules/@wordpress/scripts/config/.eslintignore
deleted file mode 100644
index ee68111..0000000
--- a/node_modules/@wordpress/scripts/config/.eslintignore
+++ /dev/null
@@ -1,3 +0,0 @@
-build
-node_modules
-vendor
diff --git a/node_modules/@wordpress/scripts/config/.eslintrc.js b/node_modules/@wordpress/scripts/config/.eslintrc.js
deleted file mode 100644
index 93d1619..0000000
--- a/node_modules/@wordpress/scripts/config/.eslintrc.js
+++ /dev/null
@@ -1,27 +0,0 @@
-/**
- * Internal dependencies
- */
-const { hasBabelConfig } = require( '../utils' );
-
-const eslintConfig = {
-	root: true,
-	extends: [ 'plugin:@wordpress/eslint-plugin/recommended' ],
-	overrides: [
-		{
-			// Unit test files and their helpers only.
-			files: [ '**/@(test|__tests__)/**/*.js', '**/?(*.)test.js' ],
-			extends: [ 'plugin:@wordpress/eslint-plugin/test-unit' ],
-		},
-	],
-};
-
-if ( ! hasBabelConfig() ) {
-	eslintConfig.parserOptions = {
-		requireConfigFile: false,
-		babelOptions: {
-			presets: [ require.resolve( '@wordpress/babel-preset-default' ) ],
-		},
-	};
-}
-
-module.exports = eslintConfig;
diff --git a/node_modules/@wordpress/scripts/config/eslint.config.js b/node_modules/@wordpress/scripts/config/eslint.config.js
new file mode 100644
index 0000000..2f8407e
--- /dev/null
+++ b/node_modules/@wordpress/scripts/config/eslint.config.js
@@ -0,0 +1,48 @@
+/**
+ * External dependencies
+ */
+const babelParser = require( '@babel/eslint-parser' );
+/**
+ * Internal dependencies
+ */
+const { hasBabelConfig } = require( '../utils' );
+/**
+ * WordPress dependencies
+ */
+const wordPress = require( '@wordpress/eslint-plugin' );
+
+const eslintConfig = [
+	{
+		ignores: [ '**/build/', '**/node_modules/', '**/vendor/' ],
+	},
+	...wordPress.configs.flat.recommended.map( ( config ) => ( {
+		...config,
+		files: [ '**/.*js', '**/*.jsx', '**/*.ts', '**/*.tsx' ],
+	} ) ),
+	{
+		...wordPress.configs.flat[ 'test-unit' ],
+		// Unit test files and their helpers only.
+		files: [ '**/@(test|__tests__)/**/*.js', '**/?(*.)test.js' ],
+	},
+];
+
+if ( ! hasBabelConfig() ) {
+	eslintConfig.forEach( ( config ) => {
+		config.languageOptions = {
+			...config?.languageOptions,
+			parser: babelParser,
+			parserOptions: {
+				...config?.languageOptions?.parserOptions,
+				requireConfigFile: false,
+				babelOptions: {
+					configFile: false,
+					presets: [
+						require.resolve( '@wordpress/babel-preset-default' ),
+					],
+				},
+			},
+		};
+	} );
+}
+
+module.exports = eslintConfig;
diff --git a/node_modules/@wordpress/scripts/scripts/lint-js.js b/node_modules/@wordpress/scripts/scripts/lint-js.js
index 781e548..16747ea 100644
--- a/node_modules/@wordpress/scripts/scripts/lint-js.js
+++ b/node_modules/@wordpress/scripts/scripts/lint-js.js
@@ -20,10 +20,7 @@ const args = getArgsFromCLI();
 
 const defaultFilesArgs = hasFileArgInCLI() ? [] : [ '.' ];
 
-// See: https://eslint.org/docs/user-guide/configuring#using-configuration-files-1.
-const hasLintConfig =
-	hasArgInCLI( '-c' ) ||
-	hasArgInCLI( '--config' ) ||
+const hasLegacyLintConfig =
 	hasProjectFile( '.eslintrc.js' ) ||
 	hasProjectFile( '.eslintrc.json' ) ||
 	hasProjectFile( '.eslintrc.yaml' ) ||
@@ -32,35 +29,69 @@ const hasLintConfig =
 	hasProjectFile( '.eslintrc' ) ||
 	hasPackageProp( 'eslintConfig' );
 
+if ( hasLegacyLintConfig ) {
+	// Backward compatibility with eslintrc mode.
+	// See: https://eslint.org/docs/latest/use/configure/configuration-files-deprecated.
+	const hasIgnoredFiles =
+		hasArgInCLI( '--ignore-path' ) || hasProjectFile( '.eslintignore' );
+
+	const legacyIgnoreArgs = ! hasIgnoredFiles
+		? [
+				'--ignore-pattern',
+				'build',
+				'--ignore-pattern',
+				'node_modules',
+				'--ignore-pattern',
+				'vendor',
+		  ]
+		: [];
+
+	const legacyExtArgs = hasArgInCLI( '--ext' )
+		? []
+		: [ '--ext', 'js,jsx,ts,tsx' ];
+
+	process.env.ESLINT_USE_FLAT_CONFIG = 'false';
+
+	const result = spawn(
+		resolveBin( 'eslint' ),
+		[ ...legacyIgnoreArgs, ...legacyExtArgs, ...args, ...defaultFilesArgs ],
+		{ stdio: 'inherit' }
+	);
+
+	process.emitWarning(
+		'Deprecated eslintrc configuration file detected. The support will be finished soon. See https://github.com/WordPress/gutenberg/pull/65648 for details.',
+		'WordPressScriptsWarning'
+	);
+
+	// Don't use process.exit, warnings are not shown that way.
+	return result.status;
+}
+
+// Enforce flat mode for ESLint v8.
+process.env.ESLINT_USE_FLAT_CONFIG = 'true';
+
+// See: https://eslint.org/docs/latest/use/configure/configuration-files.
+const hasLintConfig =
+	hasArgInCLI( '-c' ) ||
+	hasArgInCLI( '--config' ) ||
+	hasProjectFile( 'eslint.config.js' ) ||
+	hasProjectFile( 'eslint.config.mjs' ) ||
+	hasProjectFile( 'eslint.config.cjs' ) ||
+	hasProjectFile( 'eslint.config.ts' ) ||
+	hasProjectFile( 'eslint.config.mts' ) ||
+	hasProjectFile( 'eslint.config.cts' );
+
 // When a configuration is not provided by the project, use from the default
 // provided with the scripts module. Instruct ESLint to avoid discovering via
-// the `--no-eslintrc` flag, as otherwise it will still merge with inherited.
+// the `--no-config-lookup` flag.
 const defaultConfigArgs = ! hasLintConfig
-	? [ '--no-eslintrc', '--config', fromConfigRoot( '.eslintrc.js' ) ]
+	? [ '--no-config-lookup', '--config', fromConfigRoot( 'eslint.config.js' ) ]
 	: [];
 
-// See: https://eslint.org/docs/user-guide/configuring#ignoring-files-and-directories.
-const hasIgnoredFiles =
-	hasArgInCLI( '--ignore-path' ) || hasProjectFile( '.eslintignore' );
-
-const defaultIgnoreArgs = ! hasIgnoredFiles
-	? [ '--ignore-path', fromConfigRoot( '.eslintignore' ) ]
-	: [];
-
-const defaultExtArgs = hasArgInCLI( '--ext' )
-	? []
-	: [ '--ext', 'js,jsx,ts,tsx' ];
-
 const result = spawn(
 	resolveBin( 'eslint' ),
-	[
-		...defaultConfigArgs,
-		...defaultIgnoreArgs,
-		...defaultExtArgs,
-		...args,
-		...defaultFilesArgs,
-	],
+	[ ...defaultConfigArgs, ...args, ...defaultFilesArgs ],
 	{ stdio: 'inherit' }
 );
 
-process.exit( result.status );
+return result.status;
diff --git a/node_modules/@wordpress/scripts/scripts/lint-style.js b/node_modules/@wordpress/scripts/scripts/lint-style.js
index ef8b0ad..2fdc7cf 100644
--- a/node_modules/@wordpress/scripts/scripts/lint-style.js
+++ b/node_modules/@wordpress/scripts/scripts/lint-style.js
@@ -28,6 +28,7 @@ const hasLintConfig =
 	hasProjectFile( '.stylelintrc.yaml' ) ||
 	hasProjectFile( '.stylelintrc.yml' ) ||
 	hasProjectFile( 'stylelint.config.js' ) ||
+  hasProjectFile( 'stylelint.config.mjs' ) ||
 	hasProjectFile( '.stylelintrc' ) ||
 	hasPackageProp( 'stylelint' );
 
diff --git a/node_modules/@wordpress/scripts/utils/config.js b/node_modules/@wordpress/scripts/utils/config.js
index be6f183..18d7307 100644
--- a/node_modules/@wordpress/scripts/utils/config.js
+++ b/node_modules/@wordpress/scripts/utils/config.js
@@ -86,12 +86,14 @@ const hasPrettierConfig = () =>
 	hasProjectFile( '.prettierrc.yaml' ) ||
 	hasProjectFile( '.prettierrc.yml' ) ||
 	hasProjectFile( 'prettier.config.js' ) ||
+ hasProjectFile( 'prettier.config.mjs' ) ||
 	hasProjectFile( '.prettierrc' ) ||
 	hasPackageProp( 'prettier' );
 
 const hasWebpackConfig = () =>
 	hasArgInCLI( '--config' ) ||
 	hasProjectFile( 'webpack.config.js' ) ||
+ hasProjectFile( 'webpack.config.mjs' ) ||
 	hasProjectFile( 'webpack.config.babel.js' );
 
 // See https://github.com/michael-ciniawsky/postcss-load-config#usage (used by postcss-loader).
